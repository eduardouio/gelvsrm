#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Version		1.0
# Autor			Eduardo Villota <eduardouio@hotmail.com> <@eduardouio>
# Package		Clases
# File			technicalTravelClass.py
# Ubicacion		aplicacion/clases/technicalTravelClass.py
# Copyright		(c) 2013 gelvsrm <eduardouio7@gmail.com>
# +------------+----------------------+------+-----+-------------------+-------+
# 									Data Types
# +------------+----------------------+------+-----+-------------------+-------+
# | Field      | Type                 | Null | Key | Default           | Extra |
# +------------+----------------------+------+-----+-------------------+-------+
# | id_tecnico | varchar(10)          | NO   | PRI | NULL              |       |
# | id_viaje   | smallint(5) unsigned | NO   | PRI | NULL              |       |
# | registro   | timestamp            | NO   |     | CURRENT_TIMESTAMP |       |
# +------------+----------------------+------+-----+-------------------+-------+

import sys
sys.path.append('..')
from modelo.Modelo import DB

class TechnicalTravel(object):
	"""Estructura de tecnico viajes TechnicalTravel"""
	def __init__(self, id_tecnico = '',id_viaje='',registro=''):
		super(TechnicalTravel, self).__init__()
		self.id_tecnico = id_tecnico
		self.id_viaje = id_viaje
		self.registro = registro

class technicalTravelCatalog(object):
	"""acciones para el objeto technicalTravel"""
	def __init__(self, arg):
		super(technicalTravelCatalog, self).__init__()
		self.MyDb = DB()
		self.table = 'tecnico_viaje'

	def createTechnicalTravel(self,technicalTravel):
		'''Vincula un tecnico a un viaje'''
		values = {
			'id_tecnico' : technicalTravel.id_tecnico,
			'id_viaje' : technicalTravel.id_viaje,
			'registro' : technicalTravel.registro
		}

		result = self.MyDb.selectQuery(self.table,values)

		if(result.numRowsAffected()>0):
			return str(result.lastInsertId())
		else:
			return False

	def updateTechnicalTravel(self,oldTechnicalTravel,technicalTravel):
		'''Actualiza la asigancion de un tecnico a un viaje'''
		condition = ' id_tecnico = ' + str(oldTechnicalTravel.id_tecnico) + 
					' AND id_viaje = ' + str(oldTechnicalTravel.id_viaje)
		values = {
			'id_tecnico' : technicalTravel.id_tecnico,
			'id_viaje' : technicalTravel.id_viaje,
			'registro' : technicalTravel.registro
		}

		result = self.MyDb.updateQuery(self.table,values,condition)

		if(result.numRowsAffected()>0):
			return True
		else:
			return False

	def deleteTechnicalTravel(self, technicalTravel):
		'''Eliman una relacion tec viaje'''
		condition = ' id_tecnico = ' + str(oldTechnicalTravel.id_tecnico) + 
					' AND id_viaje = ' + str(oldTechnicalTravel.id_viaje)

		result = self.MyDb.deleteQuery(self.table,condition)

		if(result.numRowsAffected()>0):
			return True
		else:
			return False